// Generated by gencpp from file perception_ros/ObjectInfoArray.msg
// DO NOT EDIT!


#ifndef PERCEPTION_ROS_MESSAGE_OBJECTINFOARRAY_H
#define PERCEPTION_ROS_MESSAGE_OBJECTINFOARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_ros/ObjectInfo.h>

namespace perception_ros
{
template <class ContainerAllocator>
struct ObjectInfoArray_
{
  typedef ObjectInfoArray_<ContainerAllocator> Type;

  ObjectInfoArray_()
    : header()
    , object_info()
    , object_num(0)  {
    }
  ObjectInfoArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_info(_alloc)
    , object_num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::perception_ros::ObjectInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_ros::ObjectInfo_<ContainerAllocator> >::other >  _object_info_type;
  _object_info_type object_info;

   typedef uint16_t _object_num_type;
  _object_num_type object_num;





  typedef boost::shared_ptr< ::perception_ros::ObjectInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_ros::ObjectInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInfoArray_

typedef ::perception_ros::ObjectInfoArray_<std::allocator<void> > ObjectInfoArray;

typedef boost::shared_ptr< ::perception_ros::ObjectInfoArray > ObjectInfoArrayPtr;
typedef boost::shared_ptr< ::perception_ros::ObjectInfoArray const> ObjectInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_ros::ObjectInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_ros': ['/HDD_Disk/catkin_ws/src/perception_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros::ObjectInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros::ObjectInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros::ObjectInfoArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37eb51ebc8f73aad80204a4eb7f1c89d";
  }

  static const char* value(const ::perception_ros::ObjectInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37eb51ebc8f73aadULL;
  static const uint64_t static_value2 = 0x80204a4eb7f1c89dULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_ros/ObjectInfoArray";
  }

  static const char* value(const ::perception_ros::ObjectInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                       header                 # The message of header\n\
\n\
ObjectInfo[]                 object_info            # The information of object\n\
uint16                       object_num             # The number of object\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_ros/ObjectInfo\n\
uint16                       id                 # The No. of object\n\
uint8                        type 		        # The category of object\n\
# unknow     0\n\
# pedestrain 1\n\
# motor      2\n\
# car        3\n\
# truck      4\n\
\n\
uint8                        yaw                # The orientation angle of object\n\
uint8                        confidence         # The confidence of object\n\
uint16                       height             # The height of object\n\
uint16                       width              # The width of object\n\
uint16                       length             # The length of object\n\
int16                        distance_xv        # The longitudinal distance of object to ego vehicle coordinate\n\
int16                        distance_yv        # The lateral distance of object to ego vehicle coordinate\n\
int16                        velocity_xv        # The longitudinal velocity of object to ego vehicle coordinate\n\
int16                        velocity_yv        # The lateral velocity of object to ego vehicle coordinate\n\
int16                        accelerate_xv      # The longitudinal accelerated velocity of object to ego vehicle coordinate\n\
int16                        accelerate_yv      # The lateral accelerated velocity of object to ego vehicle coordinate\n\
uint8                        motion_state       # The motion status of object\n\
# unknow     0\n\
# moving     1\n\
# stationary 2\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::perception_ros::ObjectInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_info);
      stream.next(m.object_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_ros::ObjectInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_ros::ObjectInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_info[]" << std::endl;
    for (size_t i = 0; i < v.object_info.size(); ++i)
    {
      s << indent << "  object_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_ros::ObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.object_info[i]);
    }
    s << indent << "object_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_ROS_MESSAGE_OBJECTINFOARRAY_H
